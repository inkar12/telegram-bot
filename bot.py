import os
from dotenv import load_dotenv
from flask import Flask, request
from telegram import Update, ReplyKeyboardMarkup, Bot
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    Filters,
    CallbackContext,
)

# Load environment variables
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

if not TOKEN:
    print("‚ùå BOT_TOKEN not found in environment variables!")
    exit(1)

# Create bot and Flask app
bot = Bot(token=TOKEN)
updater = Updater(token=TOKEN, use_context=True)
dispatcher = updater.dispatcher
flask_app = Flask(__name__)

# === QUIZ LOGIC ===
questions = [
    {
        "text": "1Ô∏è‚É£ –ö–∞–∫–æ–π —É —Ç–µ–±—è —Å—Ä–µ–¥–Ω–∏–π GPA –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –≥–æ–¥–∞?",
        "options": ["–ù–∏–∂–µ 2.5", "2.5‚Äì3.3", "3.4‚Äì3.8", "3.9‚Äì4.0"],
        "scores": [0, 1, 2, 3],
    },
    {
        "text": "2Ô∏è‚É£ –ö–∞–∫ —Ç—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—à—å —Å–≤–æ–∏ –≤–Ω–µ–∫–ª–∞—Å—Å–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Å–ø–æ—Ä—Ç, –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–æ, –ø—Ä–æ–µ–∫—Ç—ã)?",
        "options": [
            "–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π",
            "–ï—Å—Ç—å –±–∞–∑–æ–≤—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
            "–•–æ—Ä–æ—à–∏–π —É—Ä–æ–≤–µ–Ω—å —É—á–∞—Å—Ç–∏—è",
            "–Ø –ª–∏–¥–µ—Ä/—Å–æ–∑–¥–∞—Ç–µ–ª—å –≤ —á–µ–º-—Ç–æ",
        ],
        "scores": [0, 1, 2, 3],
    },
    {
        "text": "3Ô∏è‚É£ –£ —Ç–µ–±—è –µ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞?",
        "options": [
            "–ù–µ—Ç, –≤–æ–æ–±—â–µ",
            "–£—á—É—Å—å, –Ω–æ –±–µ–∑ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤",
            "–ì–æ—Ç–æ–≤–ª—é—Å—å –∫ IELTS/TOEFL",
            "–£–∂–µ –µ—Å—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç",
        ],
        "scores": [0, 1, 2, 3],
    },
    {
        "text": "4Ô∏è‚É£ –¢—ã –∑–Ω–∞–µ—à—å, –∫—É–¥–∞ –∏–º–µ–Ω–Ω–æ —Ö–æ—á–µ—à—å –ø–æ—Å—Ç—É–ø–∞—Ç—å?",
        "options": [
            "–í–æ–æ–±—â–µ –Ω–µ—Ç",
            "–ï—Å—Ç—å –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –∏–¥–µ–∏",
            "–í—ã–±—Ä–∞–ª —Å—Ç—Ä–∞–Ω—É –∏ —Ç–∏–ø –≤—É–∑–∞",
            "–ï—Å—Ç—å —á—ë—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ –≤—É–∑–æ–≤",
        ],
        "scores": [0, 1, 2, 3],
    },
    {
        "text": "5Ô∏è‚É£ –ö–∞–∫ —Ç—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—à—å —Å–≤–æ–∏ —à–∞–Ω—Å—ã –Ω–∞ —Å—Ç–∏–ø–µ–Ω–¥–∏—é?",
        "options": [
            "–ù–µ –≤–µ—Ä—é, —á—Ç–æ –ø–æ–ª—É—á—É",
            "–°–æ–º–Ω–µ–≤–∞—é—Å—å, –Ω–æ —Ö–æ—á—É",
            "–î—É–º–∞—é, –µ—Å—Ç—å —à–∞–Ω—Å",
            "–£–≤–µ—Ä–µ–Ω(–∞) –≤ —Å–µ–±–µ",
        ],
        "scores": [0, 1, 2, 3],
    },
    {
        "text": "6Ô∏è‚É£ –ö–∞–∫ —Ç—ã —Ä–µ–∞–≥–∏—Ä—É–µ—à—å, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–∫–∞–∑ –≤ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –∏–ª–∏ –ø–ª–æ—Ö–∞—è –æ—Ü–µ–Ω–∫–∞?",
        "options": [
            "–û—Å–º—ã—Å–ª–∏–≤–∞—é –∏ —Å—Ç—Ä–æ—é –ø–ª–∞–Ω –∫–∞–º–±—ç–∫–∞",
            "–°–æ–º–Ω–µ–≤–∞—é—Å—å, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—é –¥–≤–∏–≥–∞—Ç—å—Å—è",
            "–ú–∞—Ö–∞—é —Ä—É–∫–æ–π ‚Äî –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å –¥—Ä—É–≥–æ–π –ø—É—Ç—å",
            "–≠—Ç–æ —Å–∏–ª—å–Ω–æ –∑–∞–¥–µ–≤–∞–µ—Ç, –º–Ω–µ –Ω—É–∂–Ω–æ –≤—Ä–µ–º—è",
        ],
        "scores": [3, 2, 1, 0],
    },
    {
        "text": "7Ô∏è‚É£ –ß—Ç–æ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç —Ç–µ–±—è –ø–æ—Å—Ç—É–ø–∞—Ç—å –∑–∞ –≥—Ä–∞–Ω–∏—Ü—É?",
        "options": [
            "–°–≤–æ–±–æ–¥–∞ –∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å",
            "–°–¥–µ–ª–∞—Ç—å —Å–µ–º—å—é –≥–æ—Ä–¥–æ–π",
            "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–æ—â–Ω–æ–µ –±—É–¥—É—â–µ–µ",
            "–ù–∞–π—Ç–∏ —Å–µ–±—è –∏ –ø–æ–Ω—è—Ç—å, –∫—Ç–æ —è",
        ],
        "scores": [2, 1, 3, 2],
    },
    {
        "text": "8Ô∏è‚É£ –ß—Ç–æ –¥–ª—è —Ç–µ–±—è –±—É–¥–µ—Ç —Å–∞–º—ã–º –≤–∞–∂–Ω—ã–º –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —É—á—ë–±—ã?",
        "options": [
            "–û–∫–∞–∑—ã–≤–∞—Ç—å –≤–ª–∏—è–Ω–∏–µ –∏ –º–µ–Ω—è—Ç—å –º–∏—Ä",
            "–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ö–æ—Ä–æ—à–æ",
            "–ñ–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ, –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π",
            "–û—Å—Ç–∞—Ç—å—Å—è –≤–µ—Ä–Ω—ã–º(–æ–π) —Å–µ–±–µ",
        ],
        "scores": [3, 2, 1, 2],
    },
]

user_scores = {}
user_steps = {}


# === Bot Handlers ===
def start(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    print(f"üì® Received /start from user {user_id}")
    user_scores[user_id] = 0
    user_steps[user_id] = 0
    send_question(update, context)


def send_question(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    step = user_steps[user_id]
    q = questions[step]
    markup = ReplyKeyboardMarkup(
        [[o] for o in q["options"]], one_time_keyboard=True, resize_keyboard=True
    )
    context.bot.send_message(chat_id=user_id, text=q["text"], reply_markup=markup)


def answer(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    print(f"üì® Received message from user {user_id}: {update.message.text}")

    if user_id not in user_steps:
        context.bot.send_message(
            chat_id=user_id, text="–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∫–≤–∏–∑."
        )
        return

    step = user_steps[user_id]
    q = questions[step]
    if update.message.text not in q["options"]:
        context.bot.send_message(
            chat_id=user_id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
        )
        return

    idx = q["options"].index(update.message.text)
    user_scores[user_id] += q["scores"][idx]
    user_steps[user_id] += 1

    if user_steps[user_id] < len(questions):
        send_question(update, context)
    else:
        score = user_scores[user_id]
        if score <= 8:
            msg = "üü° –¢—ã ‚Äî –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å.\n–¢—ã —Ç–æ–ª—å–∫–æ –≤ –Ω–∞—á–∞–ª–µ –ø—É—Ç–∏..."
        elif score <= 16:
            msg = "üü¢ –¢—ã ‚Äî –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç.\n–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∏–¥–µ–∏..."
        else:
            msg = "üîµ –¢—ã ‚Äî –ì–æ—Ç–æ–≤—ã–π –∞–ø–ø–ª–∏–∫–∞–Ω—Ç.\n–¢—ã —Å–æ–±—Ä–∞–ª –≤—Å—ë –Ω—É–∂–Ω–æ–µ –∏ –≥–æ—Ç–æ–≤ –∫ –ø–æ–¥–∞—á–µ..."

        context.bot.send_message(
            chat_id=user_id, text=f"–¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}/24\n\n{msg}"
        )
        context.bot.send_message(
            chat_id=user_id, text="üéì –Ø –ø–æ—Å—Ç—É–ø–∏–ª–∞ –≤ 16 –≤—É–∑–æ–≤ –Ω–∞ –ø–æ–ª–Ω—ã–π –≥—Ä–∞–Ω—Ç..."
        )
        context.bot.send_message(
            chat_id=user_id, text="üí° –ù–∞–ø–∏—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–µ–Ω–µ–¥–∂–µ—Ä—É: @speakinkschool"
        )


# === Dispatcher Handlers ===
dispatcher.add_handler(CommandHandler("start", start))
dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, answer))


# === Webhook Endpoint ===
@flask_app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    update = Update.de_json(request.get_json(force=True), bot)
    dispatcher.process_update(update)
    return "OK", 200


# Health check (for browser)
@flask_app.route("/")
def home():
    return "<h1>Telegram bot is running on Render!</h1>"


# === Setup Webhook ===
def setup_webhook():
    webhook_url = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/{TOKEN}"
    bot.delete_webhook(drop_pending_updates=True)
    bot.set_webhook(webhook_url)
    print(f"‚úÖ Webhook set to {webhook_url}")


# === Run the App ===
if __name__ == "__main__":
    setup_webhook()
    flask_app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
