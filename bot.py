# === bot.py ===
import os
import json
from dotenv import load_dotenv
from telegram import ReplyKeyboardMarkup, Update
from telegram.ext import (
    Updater, CommandHandler, MessageHandler, Filters, CallbackContext
)

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

# === –í–æ–ø—Ä–æ—Å—ã ===
questions = [
    {
        "text": "1\u20e3\ufe0f –ö–∞–∫–æ–π —É —Ç–µ–±—è —Å—Ä–µ–¥–Ω–∏–π GPA –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –≥–æ–¥–∞?",
        "options": ["–ù–∏–∂–µ 2.5", "2.5‚Äì3.3", "3.4‚Äì3.8", "3.9‚Äì4.0"],
        "scores": [0, 1, 2, 3],
    },
    {
        "text": "2\u20e3\ufe0f –ö–∞–∫ —Ç—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—à—å —Å–≤–æ–∏ –≤–Ω–µ–∫–ª–∞—Å—Å–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Å–ø–æ—Ä—Ç, –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–æ, –ø—Ä–æ–µ–∫—Ç—ã)?",
        "options": [
            "–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π",
            "–ï—Å—Ç—å –±–∞–∑–æ–≤—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
            "–•–æ—Ä–æ—à–∏–π —É—Ä–æ–≤–µ–Ω—å —É—á–∞—Å—Ç–∏—è",
            "–Ø –ª–∏–¥–µ—Ä/—Å–æ–∑–¥–∞—Ç–µ–ª—å –≤ —á–µ–º-—Ç–æ",
        ],
        "scores": [0, 1, 2, 3],
    },
    {
        "text": "3\u20e3\ufe0f –£ —Ç–µ–±—è –µ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞?",
        "options": [
            "–ù–µ—Ç, –≤–æ–æ–±—â–µ",
            "–£—á—É—Å—å, –Ω–æ –±–µ–∑ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤",
            "–ì–æ—Ç–æ–≤–ª—é—Å—å –∫ IELTS/TOEFL",
            "–£–∂–µ –µ—Å—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç",
        ],
        "scores": [0, 1, 2, 3],
    },
    {
        "text": "4\u20e3\ufe0f –í –∫–∞–∫–∏–µ —Å—Ç—Ä–∞–Ω—ã —Ç—ã –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –ø–æ–¥–∞–≤–∞—Ç—å?\n(–í—ã–±–µ—Ä–∏ –≤—Å–µ, —á—Ç–æ –ø–æ–¥—Ö–æ–¥—è—Ç. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å ‚Äî –Ω–∞–∂–º–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª)",
        "options": [
            "üá∫üá∏ –°–®–ê", "üá¨üáß –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è", "üá®üá¶ –ö–∞–Ω–∞–¥–∞",
            "üá™üá∫ –ï–≤—Ä–æ–ø–∞ (\u0413\u0435\u0440\u043c\u0430\u043d\u0438\u044f, \u0424\u0440\u0430\u043d\u0446\u0438\u044f \u0438 \u0434\u0440.)",
            "üá¶üá∫ –ê–≤—Å—Ç\u0440\u0430\u043b\u0438\u044f/–ù\u043e\u0432\u0430\u044f \u0417\u0435\u043b\u0430\u043d\u0434\u0438\u044f", "üá∞üá∑üáØüáµ –ê–∑–∏—è (–ö–æ—Ä–µ—è, –Ø–ø–æ–Ω–∏—è –∏ –¥—Ä.)",
            "üåç –î—Ä—É–≥–æ–µ", "‚úÖ –ì–æ—Ç–æ–≤–æ"
        ],
        "scores": [1, 1, 1, 1, 1, 1, 1, 0],
        "multi_select": True
    },
    {
        "text": "5\u20e3\ufe0f –ö–∞–∫ —Ç—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—à—å —Å–≤–æ–∏ —à–∞–Ω—Å—ã –Ω–∞ —Å—Ç–∏–ø–µ–Ω–¥–∏—é?",
        "options": [
            "–ù–µ –≤–µ—Ä—é, —á—Ç–æ –ø–æ–ª—É—á—É",
            "–°–æ–º–Ω–µ–≤–∞—é—Å—å, –Ω–æ —Ö–æ—á—É",
            "–î—É–º–∞—é, –µ—Å—Ç—å —à–∞–Ω—Å",
            "–£–≤–µ—Ä–µ–Ω(–∞) –≤ —Å–µ–±–µ",
        ],
        "scores": [0, 1, 2, 3],
    },
    {
        "text": "6\u20e3\ufe0f –ö–∞–∫ —Ç—ã —Ä–µ–∞–≥–∏—Ä—É–µ—à—å, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–∫–∞–∑ –≤ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –∏–ª–∏ –ø–ª–æ—Ö–∞—è –æ—Ü–µ–Ω–∫–∞?",
        "options": [
            "–û—Å–º—ã—Å–ª–∏–≤–∞—é –∏ —Å—Ç—Ä–æ—é –ø–ª–∞–Ω –∫–∞–º–±—ç–∫–∞",
            "–°–æ–º–Ω–µ–≤–∞—é—Å—å, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—é –¥–≤–∏–≥–∞—Ç—å—Å—è",
            "–ú–∞—Ö–∞—é —Ä—É–∫–æ–π ‚Äî –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å –¥—Ä—É–≥–æ–π –ø—É—Ç—å",
            "–≠—Ç–æ —Å–∏–ª—å–Ω–æ –∑–∞–¥–µ–≤–∞–µ—Ç, –º–Ω–µ –Ω—É–∂–Ω–æ –≤—Ä–µ–º—è",
        ],
        "scores": [3, 2, 1, 0],
    },
    {
        "text": "7\u20e3\ufe0f –ß—Ç–æ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç —Ç–µ–±—è –ø–æ—Å—Ç—É–ø–∞—Ç—å –∑–∞ –≥—Ä–∞–Ω–∏—Ü—É?",
        "options": [
            "–°–≤–æ–±–æ–¥–∞ –∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å",
            "–°–¥–µ–ª–∞—Ç—å —Å–µ–º—å—é –≥–æ—Ä–¥–æ–π",
            "–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–æ—â–Ω–æ–µ –±—É–¥—É—â–µ–µ",
            "–ù–∞–π—Ç–∏ —Å–µ–±—è –∏ –ø–æ–Ω—è—Ç—å, –∫—Ç–æ —è",
        ],
        "scores": [2, 1, 3, 2],
    },
    {
        "text": "8\u20e3\ufe0f –ù–∞—á–∞–ª(–∞) –ª–∏ —Ç—ã –ø–∏—Å–∞—Ç—å Personal Statement –∏–ª–∏ Statement of Purpose –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º?",
        "options": [
            "–ù–µ—Ç, –ø–æ–∫–∞ –Ω–µ –ø–æ–Ω–∏–º–∞—é, –∫–∞–∫ –≤–æ–æ–±—â–µ –ø–æ–¥—Å—Ç—É–ø–∏—Ç—å—Å—è",
            "–ï—Å—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫, –Ω–æ –æ–Ω —Å—ã—Ä–æ–π –∏ –Ω–µ –ø—Ä–æ –º–µ–Ω—è",
            "–ù–∞—á–∞–ª(–∞), —Å—Ç–∞—Ä–∞—é—Å—å —Ä–∞—Å–∫—Ä—ã—Ç—å —Å–≤–æ–∏ —Å–º—ã—Å–ª—ã, –Ω–æ –Ω–µ —É–≤–µ—Ä–µ–Ω(–∞)",
            "–î–∞, –Ω–∞–ø–∏—Å–∞–ª(–∞) —ç—Å—Å–µ —Å –≥–ª—É–±–æ–∫–æ–π –∏–¥–µ–µ–π –∏ —Å–∏–ª—å–Ω–æ–π –ø–æ–¥–∞—á–µ–π",
        ],
        "scores": [0, 1, 2, 3],
    },
    {
        "text": "9\u20e3\ufe0f –°–∫–æ–ª—å–∫–æ —Ç—ã –≥–æ—Ç–æ–≤(–∞) –≤–ª–æ–∂–∏—Ç—å –≤ —Å–≤–æ—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∫ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—é (–∫—É—Ä—Å—ã, –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—ã, —Ç–µ—Å—Ç—ã –∏ —Ç.–ø.)?",
        "options": [
            "–ù–∏—á–µ–≥–æ, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é —Ç–æ–ª—å–∫–æ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ",
            "–î–æ $300 (–±–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å)",
            "–û—Ç $300 –¥–æ $1000 ‚Äî –≥–æ—Ç–æ–≤(–∞) –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É",
            "–ë–æ–ª—å—à–µ $1000 ‚Äî –ø–æ–Ω–∏–º–∞—é –≤–∞–∂–Ω–æ—Å—Ç—å –≤–ª–æ–∂–µ–Ω–∏–π –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
        ],
        "scores": [0, 1, 2, 3],
    },
    {
        "text": "üîü –°–∫–æ–ª—å–∫–æ —Ç—ã –ø–ª–∞–Ω–∏—Ä—É–µ—à—å —Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ –∏ –∂–∏–∑–Ω—å –∑–∞ –≥—Ä–∞–Ω–∏—Ü–µ–π –≤ –≥–æ–¥ (–µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—à—å –ø–æ–ª–Ω—É—é —Å—Ç–∏–ø–µ–Ω–¥–∏—é)?",
        "options": [
            "–ù–∏—á–µ–≥–æ ‚Äî —Ç–æ–ª—å–∫–æ —Å—Ç–∏–ø–µ–Ω–¥–∏—è, –∏–Ω–∞—á–µ –Ω–µ –ø–æ–µ–¥—É",
            "–î–æ $5,000 –≤ –≥–æ–¥ –º–æ–≥—É –Ω–∞–π—Ç–∏/–Ω–∞–∫–æ–ø–∏—Ç—å",
            "–î–æ $15,000 ‚Äî —Å —á–∞—Å—Ç–∏—á–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ—Ç —Å–µ–º—å–∏",
            "$20,000+ ‚Äî —Å–µ–º—å—è –≥–æ—Ç–æ–≤–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –ø–æ—Å—Ç—É–ø–ª—é –≤ —Ö–æ—Ä–æ—à–∏–π –≤—É–∑",
        ],
        "scores": [0, 1, 2, 3],
    },
]

# === –°–æ—Å—Ç–æ—è–Ω–∏—è ===
user_scores = {}
user_steps = {}
user_answers = {}
user_multi_answers = {}

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
def start(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    user_scores[user_id] = 0
    user_steps[user_id] = 0
    user_answers[user_id] = {
        "username": update.effective_user.username,
        "answers": [],
        "total_score": 0
    }
    send_question(update, context)

# === –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ ===
def send_question(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    step = user_steps[user_id]
    q = questions[step]

    if q.get("multi_select") and user_id in user_multi_answers:
        current = user_multi_answers[user_id]["selected"]
        context.bot.send_message(chat_id=user_id, text=f"–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏: {', '.join(current)}")

    markup = ReplyKeyboardMarkup(
        [[o] for o in q["options"]],
        one_time_keyboard=not q.get("multi_select", False),
        resize_keyboard=True
    )
    context.bot.send_message(chat_id=user_id, text=q["text"], reply_markup=markup)

# === –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
def answer(update: Update, context: CallbackContext):
    user_id = update.effective_user.id

    if user_id not in user_steps:
        context.bot.send_message(chat_id=user_id, text="–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∫–≤–∏–∑.")
        return

    step = user_steps[user_id]
    q = questions[step]
    text = update.message.text

    if q.get("multi_select"):
        if user_id not in user_multi_answers:
            user_multi_answers[user_id] = {"selected": [], "score": 0}

        if text == "‚úÖ –ì–æ—Ç–æ–≤–æ":
            user_scores[user_id] += user_multi_answers[user_id]["score"]
            user_answers[user_id]["answers"].append({
                "question": q["text"],
                "answer": user_multi_answers[user_id]["selected"],
                "score": user_multi_answers[user_id]["score"]
            })
            user_steps[user_id] += 1
            del user_multi_answers[user_id]
        elif text in q["options"] and text not in user_multi_answers[user_id]["selected"]:
            user_multi_answers[user_id]["selected"].append(text)
            idx = q["options"].index(text)
            user_multi_answers[user_id]["score"] += q["scores"][idx]
        else:
            context.bot.send_message(chat_id=user_id, text="–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–ª–∏ –Ω–∞–∂–º–∏ ‚úÖ –ì–æ—Ç–æ–≤–æ")
            return
    else:
        if text not in q["options"]:
            context.bot.send_message(chat_id=user_id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
            return

        idx = q["options"].index(text)
        user_scores[user_id] += q["scores"][idx]

        user_answers[user_id]["answers"].append({
            "question": q["text"],
            "answer": text,
            "score": q["scores"][idx]
        })
        user_steps[user_id] += 1

    if user_steps[user_id] < len(questions):
        send_question(update, context)
    else:
        score = user_scores[user_id]
        user_answers[user_id]["total_score"] = score

        os.makedirs("responses", exist_ok=True)
        with open(f"responses/user_{user_id}.json", "w", encoding="utf-8") as f:
            json.dump(user_answers[user_id], f, ensure_ascii=False, indent=2)

        if score <= 10:
            msg = "üü° –¢—ã ‚Äî –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å..."
        elif score <= 20:
            msg = "üü¢ –¢—ã ‚Äî –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç..."
        else:
            msg = "üîµ –¢—ã ‚Äî –ì–æ—Ç–æ–≤—ã–π –∞–ø–ø–ª–∏–∫–∞–Ω—Ç..."

        context.bot.send_message(chat_id=user_id, text=f"–¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}/30\n\n{msg}")
        context.bot.send_message(chat_id=user_id, text=(
            "‚Ä¢ –Ø –ø–æ—Å—Ç—É–ø–∏–ª–∞ –≤ 16 –≤—É–∑–æ–≤ –°–®–ê –∏ –≤ —Ç–æ–ø 30 liberal arts college –Ω–∞ –ø–æ–ª–Ω—ã–π –≥—Ä–∞–Ω—Ç..."
        ))
        context.bot.send_message(chat_id=user_id, text=(
            "‚Ä¢ –•–æ—á–µ—à—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ —Ç–≤–æ–π –≤—É–∑ –º–µ—á—Ç—ã?\n"
            "–û—Ç–ø—Ä–∞–≤—å —Å–∫—Ä–∏–Ω —ç—Ç–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É: @speakinkschool"
        ))

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
def main():
    updater = Updater(token=TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, answer))

    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
